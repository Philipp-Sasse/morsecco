MORSE is a minimalistic, yet powerful programming language using the morse code
for coding.  If you know the morse code, a little forth and are a type safety
anarchist, you are almost done. Otherwise continue reading.

There is only one data type called a cell, some kind of string. Whether this
string is a UFT-8 string, an integer value, a memory address, a custom type or
executable code, depends on you -- you are free to do the dirtiest tricks with
that or to shoot your own foot.

There are two habitats for cells: The stack and the storage. The stack behaves
like in all stacked-based language: You can push something on it, and most
commands work on the top cell(s) of the stack. The storage is an addressable
memory: Enter a cell with some value on the stack, then a cell with some address
and Put it there. Later Enter the address and Get the cell back on the stack --
so that's a variable. Or Run the contents of the cell as code -- that's
executing a function! 

That's already the whole working principle, so let's start coding. In morse
code, a '.' stands for the short beep, '-' for the long beep and ' ' for the
break between two chars. Take a morse table at hand and decipher the sequence
'. .-.. . --. .- -. -' as ELEGANT. Fine, but this is not about the morse code,
but about coding with morse, and '.' (letter E) is the Enter command to put
something on the stack. Did you realize some words above were capitalized?
Then you already know that '.--.' (P) is the Put command to write to the
storage, '--.' (G) is Get to read back and '.-.' (R) Runs a storage cell as
a command. Back to '.': it Enters the following element to a cell and places
is on the top of the stack, so the start of the word ELEGANT

. .-.. . --.   places '.-..' and '--.' on the stack

You can verify this by displaying the stack with '...-.':

$ ./morse.py '. .-.. . --. ...-.'                           
--.
.-..
 : . .-.. . --. ...-.

Great: '--.' is on top the the stack, '.-..' below. Don't care for the last
line including our code by now. Let's add the next letter A to our code:

./morse.py '. .-.. . --. .- ...-.'                  
-.
 : . .-.. . --. .- ...-.

The '.-' did replace our two stack elements with '_.' -- why that? Well,
welcome to type anarchy! The Add command '.-' expects two integer values
on the stack to replace them with the sum. Integers are coded in binary,
so our '--.' is 110 (6), '.-..' is 0100 (4) and the resulting '-.' is 10 (2),
which is obviously wrong. Okay, we need to know that a leading '.' makes morse
numbers negative, so we have 6+(-4)=2, which is correct.
./morse.py -f multiply.morse . .... .-- . -- . --- .... ---.



∙ –––      Enter a
∙ ––∙      Enter b
∙ ∙        Enter sum
–– –       Mark here
– ∙        swap b to top
  ––∙∙ ––∙  ZeroSkip
  ∙ ∙– ∙–   decrement b
  – ∙       swap
  – ––      copy a      
  ∙–        Add a to sum      
  ––∙       Go
–– ∙      Clean addr stack
–∙– –∙    Konv to Num
–––       Output
